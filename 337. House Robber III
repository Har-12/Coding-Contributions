
public class House_Robber_III {
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     *     int val;
     *     TreeNode left;
     *     TreeNode right;
     *     TreeNode(int x) { val = x; }
     * }
     */


    class Solution_singleRecursion {

        public int rob(TreeNode root) {

            return Math.max(dfs(root, true), dfs(root, false));
        }

        private int dfs(TreeNode root, boolean isCurrentRootRobbed) {

            if (root == null) {
                return 0;
            }

            if (isCurrentRootRobbed) {
                return root.val + dfs(root.left, false) + dfs(root.right, false);
            } else {
                // child can be either rob or no-rob
                return Math.max(dfs(root.left, true), dfs(root.left, false)) + Math.max(dfs(root.right, true), dfs(root.right, false));
            }
        }
    }

    class Solution {
        /*
            1. node value can be negative?

         */
        public int rob(TreeNode root) {
            if (root == null) {
                return 0;
            }

            return Math.max(target(root), skip(root));
        }

        private int target(TreeNode root) {
            if (root == null) {
                return 0;
            }

            return root.val + skip(root.left) + skip(root.right);
        }

        private int skip(TreeNode root) {
            if (root == null) {
                return 0;
            }

            // @note: not target, but rob again => 因为理论上可以连续skip两层
//            return target(root.left) + target(root.right);
            return rob(root.left) + rob(root.right);
        }
    }
}
class Solution {
    private Map<TreeNode, Integer> memo;

    public int rob(TreeNode root) {
        memo = new HashMap<>();
        return dfs(root);
    }

    private int dfs(TreeNode root) {
        if (root == null) {
            return 0;
        }
        if (memo.containsKey(root)) {
            return memo.get(root);
        }
        int a = dfs(root.left) + dfs(root.right);
        int b = root.val;
        if (root.left != null) {
            b += dfs(root.left.left) + dfs(root.left.right);
        }
        if (root.right != null) {
            b += dfs(root.right.left) + dfs(root.right.right);
        }
        int res = Math.max(a, b);
        memo.put(root, res);
        return res;
    }
}
