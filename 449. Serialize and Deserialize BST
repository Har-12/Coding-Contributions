/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    public String serialize(TreeNode root) {
        
        if(root == null)
            return null;
        
        String result = null;
        StringBuilder tree = new StringBuilder();
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        while(!q.isEmpty()) {
            
            TreeNode node = q.poll();
            if(node != null) {
                tree.append(node.val);
                tree.append(" ");
            
                q.add(node.left);
                q.add(node.right); 
               
            } else  {
                tree.append("null");
                tree.append(" ");
            }
            
        }
        return tree.toString().trim();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null)
            return null;
            
        String[] nodes = data.split(" ");    
        int i = 0;
        TreeNode root = toNode(nodes, i++);
        
        Queue<TreeNode> q = new LinkedList<>(); 
        q.add(root);
        
        while(i < nodes.length) {
            int size = q.size();
            while(size-- > 0 && i<nodes.length ) {
            
            TreeNode node = q.poll();
            node.left = toNode(nodes, i++);
            node.right = toNode(nodes, i++);
            
             if(node.left != null) {
               q.add(node.left);
             }
           
             if(node.right != null) {
               q.add(node.right);
             } 

         } // End of inner while loop
        }   
        return root;
    }
    
    //Create Node
    private TreeNode toNode(String[] nodes, int index) {
        
        if(index >= nodes.length || "null".equals(nodes[index]))
            return null;
        
        return new TreeNode(Integer.parseInt(nodes[index]));
    }
    }
