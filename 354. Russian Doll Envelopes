class Solution {


    // Its a question of Longest Increasing subsequence and I have code it but it is showing TLE.

    // sort the array bases on width.

    // Given below is my code

    // static int helper(int arr[][]){

    //     int dp[] = new int[100005];
    //     dp[0] = 1;
    //     int result = 1;
    //     int n = arr.length;

    //     for(int i=1; i<n; i++){
    //         int ans = 0;
    //         for(int j=i-1; j>=0; j--){
    //             if(arr[j][1]<arr[i][1]) ans = Math.max(ans,dp[j]);
    //         }
    //         dp[i] = ans+1;
    //         result = Math.max(result,dp[i]);
    //     }
    //     return result;
    // }

    // Taken Help
    
public int maxEnvelopes(int[][] envelopes) {
    if(envelopes == null || envelopes.length == 0 
       || envelopes[0] == null || envelopes[0].length != 2)
        return 0;
    Arrays.sort(envelopes, new Comparator<int[]>(){
        public int compare(int[] arr1, int[] arr2){
            if(arr1[0] == arr2[0])
                return arr2[1] - arr1[1];
            else
                return arr1[0] - arr2[0];
       } 
    });
    int dp[] = new int[envelopes.length];
    int len = 0;
    for(int[] envelope : envelopes){
        int index = Arrays.binarySearch(dp, 0, len, envelope[1]);
        if(index < 0)
            index = -(index + 1);
        dp[index] = envelope[1];
        if(index == len)
            len++;
    }
    return len;
}
}
