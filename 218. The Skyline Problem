from queue import PriorityQueue
class Solution:
    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        ans, lines, pq = [], [], PriorityQueue()
        for build in buildings:
            lines.extend([build[0], build[1]])
        lines.sort()
        curbuilding, n = 0, len(buildings)
        for line in lines: # 对于每一个边界线 lines[i]，找出所有包含 lines[i] 的建筑物
            while curbuilding < n and buildings[curbuilding][0] <= line:
                pq.put([-buildings[curbuilding][2], buildings[curbuilding][0], buildings[curbuilding][1]]) # 建筑物的高度构建优先队列（大根堆），这里会包括line自己的building
                curbuilding += 1
            while not pq.empty() and pq.queue[0][2] <= line: # higher at heap top after negated
                pq.get() # i.e. pop(), remove no-overlapping building
            high = 0 # 建筑物的左边界小于等于 lines[i]，右边界大于 lines[i]，则这些建筑物中高度最高的建筑物的高度就是该线轮廓点的高度
            if not pq.empty():
                high = -pq.queue[0][0]
            if len(ans) > 0 and ans[-1][1] == high: # 绿色建筑的左边的line，就要跳过
                continue
            ans.append([line, high])
        return ans
